######## TERMINOLOGIA ################

SQL RDBMS ---------- MongoDB
DATABASE  ---------- DATABASE
TABLE     ---------- COLLECTION
ROWS      ---------- DOCUMENT JSON
QUERY     ---------- QUERY
INDEX     ---------- INDEX
PARTITION ---------- SHARD
 
              MYSQL                                                     MONGODB
 
 INSERT INTO users (user_id, age, status)                         db.user.insert({
 VALUES ("bcd001",45,"A")                                           user_id:"bcd001",
                                                                    age:45,
                                                                    status:"A"
                                                                    })
------------------------------------------------------------------------------------------------------------------------------------------

SELECT * FROM users                                               db.users.find()

-----------------------------------------------------------------------------------------------------------------------------------------

UPDATE users SET status ="C"                                      db.users.update
WHERE age > 25                                                    { age: { $gt:25 } },
                                                                  { $set: { status: "C" } },
                                                                  { multi: true}

========================================================================================================================================                                                              
#########################################################################################################################################

MONGOEXPORT

Para exportarmos os dados de uma coleção no MongoDb usaremos o comando mongoexport da seguinte forma:

mongoexport --db nome_do_database --collection nome_da_colecao --out minha_colecao.json


Onde:

--db ou -d: especifica a database a ser usada/criada;
--collection ou -c: especifica a coleção a ser usada/criada;
--out: especifica qual arquivo receberá os dados.

------------------------------------------------------------------------------------------------------------------------------------------
MONGOIMPORT

O mongoimport é o comando utilizado para importar dados para o MongoDb, para isso você deverá usar um arquivo: Extended JSON, CSV, ou TSV export criado pelo mongoexport.

mongoimport --db database --collection collection --drop --file data.json
Onde:

--db ou -d: especifica a database a ser usada/criada;
--collection ou -c: especifica a coleção a ser usada/criada;
--drop: apaga a coleção antes de inserir os novos dados;
--file: especifica o caminho do arquivo a ser importado.

========================================================================================================================================                                                              
#########################################################################################################################################

O CRUD é um acrônimo para Create, Read, Update e Delete. São as 4 operações principais em um banco de dados.

(NORMAL)CRUD (Create, Read, Update e Delete)
em MongoDB = (insert, find, update e remove)

1-ex:
 create- db.insert() = db.collection.insert()
1 comand =  var pokemon = {'name':'Charmander', 'description':'dinossauro com rabo pegando fogo', 'type':'fire', 'attack':150, 'height': 0.6}
2 comand =  db.pokemons.insert(pokemon)
-------------------------------------------------------------------------------------------------------------------------------------------
save

Nós também podemos inserir objetos utilizando o save, ele tanto insere como altera valores.

db.pokemons.save(pokemon) #######
WriteResult({ "nInserted" : 1 })

----------------------------------------------------------------------------------------------------------------------------------------
Depois listamos para conferir:

db.pokemons.find() ###########

{ "_id" : ObjectId("5936e95c4642cee444f2a569"), "name" : "Pikachu", "description" : "Rato eletrico doentao", "type" : "electric", "attack" : 100, "height" : 0.4 }
{ "_id" : ObjectId("5936e9e74642cee444f2a56a"), "name" : "Pikachu", "description" : "Rato eletrico doentao", "type" : "electric", "attack" : 55, "height" : 0.4 }
{ "_id" : ObjectId("5936ea0f4642cee444f2a56b"), "name" : "Pikachu", "description" : "Rato eletrico doentao", "type" : "electric", "attack" : 125, "height" : 0.4 }
{ "_id" : ObjectId("5936edf84642cee444f2a56c"), "name" : "Bulbasaur", "description" : "meio urso meio sapo com flor fechada nas costas", "type" : "grass", "attack" : 100, "height" : 0.7 }
{ "_id" : ObjectId("5936ef304642cee444f2a56d"), "name" : "Squirtle", "description" : "tartaruga azul", "type" : "water", "attack" : 175, "height" : 0.5 }
{ "_id" : ObjectId("5936ef474642cee444f2a56e"), "name" : "Charmander", "description" : "dinossauro com rabo pegando fogo", "type" : "fire", "attack" : 150, "height" : 0.6 }
{ "_id" : ObjectId("5936f4c34642cee444f2a56f"), "name" : "Caterpie", "description" : "larva lutadora", "type" : "inseto", "attack" : 30, "height" : 0.3 }
{ "_id" : ObjectId("5936f6284642cee444f2a570"), "name" : "Onix", "description" : "cobra de pedra", "type" : "Rock", "attack" : 60, "height" : 8.8 }



Para alterarmos um valor com save, precisamos inicialmente buscar o objeto desejado com findOne, pois ele me retorna apenas o primeiro objeto achado. Caso eu usasse o find, mesmo retornando um objeto, ainda seria dentro de um Array.

Por isso usamos o find para listagem de registros e o findOne para consulta de registros.

Veja a diferença de retorno das duas funções:


var query = {name: 'Caterpie'}
suissacorp(mongod-2.4.8) be-mean> var p = db.pokemons.find(query)
suissacorp(mongod-3.0.6) be-mean-instagram> p
{
  "_id": ObjectId("56422705613f89ac53a7b5d4"),
  "name": "Caterpie",
  "description": "Larva lutadora",
  "type": "inseto",
  "attack": 30,
  "height": 0.3
}
Fetched 1 record(s) in 1ms
suissacorp(mongod-3.0.6) be-mean-instagram> p.name
suissacorp(mongod-3.0.6) be-mean-instagram>
Não conseguimos acessar diretamente nosso objeto pois ele é retornado na forma de cursor, que possui métodos especiais para acessar seus valores, como visto aqui.

Então precisamos utilizar o findOne pois ele retorna um objeto comum.

var p = db.pokemons.findOne(query)
suissacorp(mongod-3.0.6) be-mean-instagram> p
{
  "_id": ObjectId("56422705613f89ac53a7b5d4"),
  "name": "Caterpie",
  "description": "Larva lutadora",
  "type": "inseto",
  "attack": 30,
  "height": 0.3
}
suissacorp(mongod-3.0.6) be-mean-instagram> p.name
Caterpie
suissacorp(mongod-3.0.6) be-mean-instagram> p.defense = 35
35
suissacorp(mongod-3.0.6) be-mean-instagram> p
{
  "_id": ObjectId("56422705613f89ac53a7b5d4"),
  "name": "Caterpie",
  "description": "Larva lutadora",
  "type": "inseto",
  "attack": 30,
  "height": 0.3,
  "defense": 35
}
suissacorp(mongod-3.0.6) be-mean-instagram> db.pokemons.save(p)
Updated 1 existing record(s) in 2ms
WriteResult({
  "nMatched": 1,
  "nUpserted": 0,
  "nModified": 1
})
----------------------------------------------------------------------------------------------------------------------------------------

CURSOR
1 -  var cur = db.pokemons.find(); // dar um find
2 -  while(cur.hasNext()){print(tojson(cur.next())) }  // se o cursor tiver uma proxima posicao ira imprimir (print)



